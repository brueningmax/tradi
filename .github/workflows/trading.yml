name: TraderAgent Hourly Trading

on:
  schedule:
    # Run every hour at the start of the hour (UTC)
    - cron: '0 * * * *'
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      trading_mode:
        description: 'Trading mode'
        required: true
        default: 'paper'
        type: choice
        options:
        - paper
        - live
      use_volume:
        description: 'Use volume analysis'
        required: true
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  trade:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Prevent hanging workflows
    
    # Give the workflow write permissions to commit balance changes
    permissions:
      contents: write
    
    steps:
    - name: 🔄 Checkout repository
      uses: actions/checkout@v4
      with:
        # Fetch full history to ensure proper git operations
        fetch-depth: 0
        # Use a token that can push to protected branches
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🔍 Verify API key exists
      run: |
        if [ -z "$OPENAI_API_KEY" ]; then
          echo "❌ OPENAI_API_KEY secret not configured"
          exit 1
        fi
        echo "✅ OpenAI API key is configured"
        
    - name: 📊 Run trading bot
      id: trading
      run: |
        echo "🤖 Starting TraderAgent execution..."
        echo "📅 Execution time: $(date -u)"
        echo "⏰ UTC Time: $(date -u '+%Y-%m-%d %H:%M:%S')"
        
        # Determine trading mode and volume setting
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          TRADING_MODE="${{ github.event.inputs.trading_mode }}"
          USE_VOLUME="${{ github.event.inputs.use_volume }}"
        else
          TRADING_MODE="paper"  # Default to paper for scheduled runs
          USE_VOLUME="true"
        fi
        
        echo "🎯 Trading mode: $TRADING_MODE"
        echo "📈 Volume analysis: $USE_VOLUME"
        
        # Build command arguments
        ARGS="--live"
        if [ "$TRADING_MODE" = "paper" ]; then
          ARGS="$ARGS --paper"
        fi
        if [ "$USE_VOLUME" = "false" ]; then
          ARGS="$ARGS --no-volume"
        fi
        
        echo "🚀 Command: python main.py $ARGS"
        echo "execution_time=$(date -u)" >> $GITHUB_OUTPUT
        echo "trading_mode=$TRADING_MODE" >> $GITHUB_OUTPUT
        echo "use_volume=$USE_VOLUME" >> $GITHUB_OUTPUT
        
        # Run the trading bot with output capture
        if [ "$TRADING_MODE" = "live" ]; then
          echo "⚠️ LIVE TRADING MODE - USING REAL MONEY!"
          echo "YES" | python main.py $ARGS 2>&1 | tee trading_output.log
        else
          python main.py $ARGS 2>&1 | tee trading_output.log
        fi
        
        echo "execution_status=success" >> $GITHUB_OUTPUT
        
    - name: 💾 Commit updated balance
      if: success()
      run: |
        # Configure git for automated commits
        git config --local user.email "action@github.com"
        git config --local user.name "TraderAgent Bot"
        
        # Check if balance file has changed
        if git diff --quiet data/paper_balance.json; then
          echo "📊 No balance changes to commit"
        else
          echo "💾 Committing updated balance..."
          git add data/paper_balance.json
          git commit -m "🤖 Update trading balance - $(date -u '+%Y-%m-%d %H:%M:%S')"
          git push origin main
          echo "✅ Balance successfully persisted to repository"
        fi
        
    - name: 📈 Display trading results
      if: always()
      run: |
        echo "## 🤖 TraderAgent Execution Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**📅 Execution Time:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**🎯 Trading Mode:** ${{ steps.trading.outputs.trading_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "**📈 Volume Analysis:** ${{ steps.trading.outputs.use_volume }}" >> $GITHUB_STEP_SUMMARY
        echo "**⏱️ Workflow:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "trading_output.log" ]; then
          echo "### 📊 Trading Output" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -50 trading_output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Display balance if available
        if [ -f "data/paper_balance.json" ]; then
          echo "### 💰 Current Balance" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          python -c "
import json
with open('data/paper_balance.json', 'r') as f:
    balance = json.load(f)
    print(f'USD: \${balance[\"USD\"]:.2f}')
    print(f'Realized P&L: \${balance[\"realized_pnl\"]:.2f}')
    print(f'Available Margin: \${balance[\"margin\"][\"available\"]:.2f}')
    print(f'Used Margin: \${balance[\"margin\"][\"used\"]:.2f}')
    
    # Show positions
    for coin in ['BTC', 'SOL']:
        long_pos = balance['positions'][coin]['long']
        short_pos = balance['positions'][coin]['short']
        if long_pos['amount'] > 0:
            print(f'{coin} LONG: {long_pos[\"amount\"]:.6f} @ \${long_pos[\"avg_price\"]:.2f}')
        if short_pos['amount'] > 0:
            print(f'{coin} SHORT: {short_pos[\"amount\"]:.6f} @ \${short_pos[\"avg_price\"]:.2f}')
          " >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show recent history
        if [ -f "data/paper_balance.json" ]; then
          echo "### 📋 Recent Trading History" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          python -c "
import json
with open('data/paper_balance.json', 'r') as f:
    balance = json.load(f)
    history = balance.get('history', [])
    for trade in history[-5:]:  # Last 5 trades
        print(trade)
          " >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📤 Upload trading logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: trading-logs-${{ github.run_number }}
        path: |
          trading_output.log
          data/paper_balance.json
        retention-days: 30
        
    - name: ❌ Handle execution failure
      if: failure()
      run: |
        echo "## ❌ Trading Execution Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**📅 Failed at:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "**🎯 Trading Mode:** ${{ steps.trading.outputs.trading_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Error Details" >> $GITHUB_STEP_SUMMARY
        if [ -f "trading_output.log" ]; then
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 trading_output.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Optional: You can add notification logic here
        # For example, send to Discord, Slack, or email